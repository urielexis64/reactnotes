{"version":3,"sources":["Note/Note.jsx","NoteForm/NoteForm.jsx","config/config.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","state","modalIsOpen","handleRemove","id","window","confirm","removeNote","noteId","noteContent","noteColor","db","firebase","database","ref","child","this","setState","newContent","color","on","snap","val","update","setModalState","style","backgroundColor","className","onClick","isOpen","onRequestClose","input","textInput","type","defaultValue","colorInput","updateNoteContent","value","Component","NoteForm","addNote","bind","noteText","trim","focus","placeholder","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","notes","app","initializeApp","removeAll","push","key","i","length","splice","remove","note","set","map","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c550fd61.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Note.css';\r\nimport Modal from 'react-modal';\r\n\r\nimport firebase from 'firebase'\r\nimport 'firebase/database'\r\n\r\nclass Note extends Component {\r\n\r\n    state = {\r\n        modalIsOpen: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.noteId = props.noteId;\r\n        this.noteContent = props.noteContent;\r\n        this.noteColor = props.noteColor;\r\n        this.db = firebase.database().ref().child('notes');\r\n    }\r\n\r\n    handleRemove = id => {\r\n        const response = window.confirm(\"Are you sure?\");\r\n        if (response)\r\n            this.props.removeNote(id);\r\n    }\r\n\r\n    setModalState(state) {\r\n        this.setState({\r\n            modalIsOpen: state\r\n        });\r\n    }\r\n\r\n    updateNoteContent(noteId, newContent, color) {\r\n        this.db.on('child_changed', snap => {\r\n            this.noteContent = snap.val().noteContent;\r\n            this.noteColor = snap.val().noteColor;\r\n        });\r\n        this.db.child(noteId).update({\r\n            noteContent: newContent,\r\n            noteColor: color\r\n        });\r\n        this.setModalState(false);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ backgroundColor: this.noteColor }} className=\"Note\">\r\n                    <p>{this.noteContent}</p>\r\n                    <span\r\n                        onClick={() => this.handleRemove(this.noteId)}>&times;</span>\r\n                    <span\r\n                        onClick={() => this.setModalState(true)}>Edit</span>\r\n                </div>\r\n                <Modal\r\n                    className=\"Modal\"\r\n                    isOpen={this.state.modalIsOpen}\r\n                    onRequestClose={() => this.setModalState(false)}\r\n                >\r\n                    <h1>Edit note</h1>\r\n                    <div>\r\n                        <textarea\r\n                            id=\"txtEditInput\"\r\n                            ref={input => { this.textInput = input; }}\r\n                            type=\"text\">\r\n                            {this.noteContent}\r\n                        </textarea>\r\n                        <input\r\n                            defaultValue={this.noteColor}\r\n                            id=\"modalcolor\"\r\n                            ref={colorInput => { this.colorInput = colorInput; }}\r\n                            type=\"color\"\r\n                        />\r\n                    </div>\r\n\r\n                    <button\r\n                        className=\"modalbtn save\"\r\n                        onClick={() => this.updateNoteContent(this.noteId, this.textInput.value, this.colorInput.value)}>\r\n                        Close and Save\r\n                    </button>\r\n                    <button\r\n                        className=\"modalbtn close\"\r\n                        onClick={() => this.setModalState(false)}>\r\n                        Close\r\n                    </button>\r\n\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Note;","import React, { Component } from 'react';\r\nimport './NoteForm.css';\r\n\r\nexport default class NoteForm extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.addNote = this.addNote.bind(this);\r\n    }\r\n\r\n    addNote() {\r\n        const noteText = this.textInput.value;\r\n        const colorInput = this.colorInput.value;\r\n        if (noteText.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        this.props.addNote(noteText, colorInput);\r\n        this.textInput.value = '';\r\n        this.textInput.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"NoteForm\">\r\n                <input\r\n                    id=\"txtInput\"\r\n                    ref={input => { this.textInput = input; }}\r\n                    placeholder=\"Write a note\"\r\n                    type=\"text\"\r\n                />\r\n\r\n                <input\r\n                    defaultValue=\"#ffffff\"\r\n                    id=\"color\"\r\n                    ref={colorInput => { this.colorInput = colorInput; }}\r\n                    type=\"color\"\r\n                />\r\n\r\n                <button\r\n                    onClick={this.addNote}>\r\n                    Add Note\r\n                </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyCAT2zI-y88YcRjzZkTDP5goeiI1CsLIuk\",\r\n    authDomain: \"notesreact-74187.firebaseapp.com\",\r\n    databaseURL: \"https://notesreact-74187.firebaseio.com\",\r\n    projectId: \"notesreact-74187\",\r\n    storageBucket: \"notesreact-74187.appspot.com\",\r\n    messagingSenderId: \"913855819316\",\r\n    appId: \"1:913855819316:web:d4f5049397b11c8edb2461\"\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Note from './Note/Note'\nimport NoteForm from './NoteForm/NoteForm'\n\nimport firebase from 'firebase'\nimport { DB_CONFIG } from './config/config'\nimport 'firebase/database'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      notes: [\n      ]\n    };\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.db = this.app.database().ref().child('notes');\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n    this.removeAll = this.removeAll.bind(this);\n  }\n\n  componentDidMount() {\n    const { notes } = this.state;\n    this.db.on('child_added', snap => {\n      notes.push({\n        noteId: snap.key,\n        noteContent: snap.val().noteContent,\n        noteColor: snap.val().noteColor\n      })\n      this.setState({ notes });\n    });\n\n    this.db.on('child_removed', snap => {\n      for (let i = 0; i < notes.length; i++) {\n        if (notes[i].noteId === snap.key) {\n          notes.splice(i, 1);\n        }\n      }\n      this.setState({ notes });\n    });\n\n  }\n\n  removeNote(noteId) {\n    this.db.child(noteId).remove();\n  }\n\n  addNote(note, color) {\n    /* let{notes} = this.state;\n    notes.push({\n      noteContent: note,\n      noteId: notes.length+1\n    }); \n    this.setState({notes});*/\n    this.db.push().set({\n      noteContent: note,\n      noteColor: color\n    });\n  }\n\n  removeAll() {\n    const response = window.confirm('Are you sure?');\n    if (!response) return;\n    firebase.database().ref('notes').remove();\n    this.setState({\n      notes: []\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"notesHeader\">\n        <div>\n          <h1>Quick Notes</h1>\n          <button id='borrarTodo' onClick={this.removeAll}>Remove all</button>\n        </div>\n        <div className=\"notesBody\">\n          <ul>\n            {\n              this.state.notes.map(note => {\n                return (\n                  <Note\n                    noteContent={note.noteContent}\n                    noteId={note.noteId}\n                    key={note.noteId}\n                    noteColor={note.noteColor}\n                    removeNote={this.removeNote}\n                  />\n                )\n              })\n            }\n          </ul>\n        </div>\n\n        <div className=\"notesFooter\">\n\n          <NoteForm\n            addNote={this.addNote}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}